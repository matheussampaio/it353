
package my_beans;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * CDYNE Profanity Filter web service is a simple, but elegant way to remove words that are considered profanity to keep professionalism in online web-based applications. Basic Profanity Filtering can be accomplished by utilizing the <b>SimpleProfanityFilter</b> operation below. <br /><br /> <b>Please look at our <a href="http://wiki.cdyne.com/wiki/index.php?title=Profanity_Filter">wiki</a> for details on CDYNE's Profanity filter (Character limits, etc).</b>
 * 
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2-hudson-752-
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "Profanity", targetNamespace = "http://ws.cdyne.com/ProfanityWS/Profanity.asmx", wsdlLocation = "http://ws.cdyne.com/ProfanityWS/Profanity.asmx?wsdl")
public class Profanity
    extends Service
{

    private final static URL PROFANITY_WSDL_LOCATION;
    private final static WebServiceException PROFANITY_EXCEPTION;
    private final static QName PROFANITY_QNAME = new QName("http://ws.cdyne.com/ProfanityWS/Profanity.asmx", "Profanity");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("http://ws.cdyne.com/ProfanityWS/Profanity.asmx?wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        PROFANITY_WSDL_LOCATION = url;
        PROFANITY_EXCEPTION = e;
    }

    public Profanity() {
        super(__getWsdlLocation(), PROFANITY_QNAME);
    }

    public Profanity(WebServiceFeature... features) {
        super(__getWsdlLocation(), PROFANITY_QNAME, features);
    }

    public Profanity(URL wsdlLocation) {
        super(wsdlLocation, PROFANITY_QNAME);
    }

    public Profanity(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, PROFANITY_QNAME, features);
    }

    public Profanity(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Profanity(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns ProfanitySoap
     */
    @WebEndpoint(name = "ProfanitySoap")
    public ProfanitySoap getProfanitySoap() {
        return super.getPort(new QName("http://ws.cdyne.com/ProfanityWS/Profanity.asmx", "ProfanitySoap"), ProfanitySoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ProfanitySoap
     */
    @WebEndpoint(name = "ProfanitySoap")
    public ProfanitySoap getProfanitySoap(WebServiceFeature... features) {
        return super.getPort(new QName("http://ws.cdyne.com/ProfanityWS/Profanity.asmx", "ProfanitySoap"), ProfanitySoap.class, features);
    }

    /**
     * 
     * @return
     *     returns ProfanitySoap
     */
    @WebEndpoint(name = "ProfanitySoap12")
    public ProfanitySoap getProfanitySoap12() {
        return super.getPort(new QName("http://ws.cdyne.com/ProfanityWS/Profanity.asmx", "ProfanitySoap12"), ProfanitySoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ProfanitySoap
     */
    @WebEndpoint(name = "ProfanitySoap12")
    public ProfanitySoap getProfanitySoap12(WebServiceFeature... features) {
        return super.getPort(new QName("http://ws.cdyne.com/ProfanityWS/Profanity.asmx", "ProfanitySoap12"), ProfanitySoap.class, features);
    }

    /**
     * 
     * @return
     *     returns ProfanityHttpGet
     */
    @WebEndpoint(name = "ProfanityHttpGet")
    public ProfanityHttpGet getProfanityHttpGet() {
        return super.getPort(new QName("http://ws.cdyne.com/ProfanityWS/Profanity.asmx", "ProfanityHttpGet"), ProfanityHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ProfanityHttpGet
     */
    @WebEndpoint(name = "ProfanityHttpGet")
    public ProfanityHttpGet getProfanityHttpGet(WebServiceFeature... features) {
        return super.getPort(new QName("http://ws.cdyne.com/ProfanityWS/Profanity.asmx", "ProfanityHttpGet"), ProfanityHttpGet.class, features);
    }

    /**
     * 
     * @return
     *     returns ProfanityHttpPost
     */
    @WebEndpoint(name = "ProfanityHttpPost")
    public ProfanityHttpPost getProfanityHttpPost() {
        return super.getPort(new QName("http://ws.cdyne.com/ProfanityWS/Profanity.asmx", "ProfanityHttpPost"), ProfanityHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ProfanityHttpPost
     */
    @WebEndpoint(name = "ProfanityHttpPost")
    public ProfanityHttpPost getProfanityHttpPost(WebServiceFeature... features) {
        return super.getPort(new QName("http://ws.cdyne.com/ProfanityWS/Profanity.asmx", "ProfanityHttpPost"), ProfanityHttpPost.class, features);
    }

    private static URL __getWsdlLocation() {
        if (PROFANITY_EXCEPTION!= null) {
            throw PROFANITY_EXCEPTION;
        }
        return PROFANITY_WSDL_LOCATION;
    }

}
